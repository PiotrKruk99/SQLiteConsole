#!/usr/bin/env python3
# -*- coding: UTF-8 -*-
#
# generated by wxGlade 1.0.2 on Tue Nov  9 21:32:46 2021
#

from os import chdir
#from typing import Tuple
import wx
import sqlite3
from pathlib import Path

# begin wxGlade: dependencies
import wx.grid
# end wxGlade

# begin wxGlade: extracode
# end wxGlade


class SQLiteCtrl:
    # sqlite3#  = __import__('sqlite3')

    def __init__(self, path='') -> None:
        # self.sqlite3 = __import__('sqlite3')
        self.__conn = None
        if len(path) > 0:
            self.openConnection(path)

    def openConnection(self, path):
        if self.__conn == None:
            self.__conn = sqlite3.connect(path)
        else:
            self.__conn = sqlite3.connect(path)

    def closeConnection(self):
        if self.__conn != None:
            self.__conn.close()
            self.__conn == None

    def executeCmd(self, command):
        if self.__conn != None:
            try:
                cur = self.__conn.cursor()
                cur.execute(command)
                self.__conn.commit()
                return cur.fetchall()
            except sqlite3.Error as error:
                return error.args
        else:
            return 'error: no database opened'


class MainFrame(wx.Frame):
    def __init__(self, *args, **kwds):
        # begin wxGlade: MainFrame.__init__
        kwds["style"] = kwds.get("style", 0) | wx.DEFAULT_FRAME_STYLE
        wx.Frame.__init__(self, *args, **kwds)
        self.SetSize((496, 420))
        self.SetTitle("SQLite Console")

        # Menu Bar
        self.mainMenu = wx.MenuBar()
        wxglade_tmp_menu = wx.Menu()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&New connection...", "")
        self.Bind(wx.EVT_MENU, self.onNewClick, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Open connection...", "")
        self.Bind(wx.EVT_MENU, self.onOpenClick, item)
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "&Close connection", "")
        self.Bind(wx.EVT_MENU, self.onCloseClick, item)
        wxglade_tmp_menu.AppendSeparator()
        item = wxglade_tmp_menu.Append(wx.ID_ANY, "E&xit", "")
        self.Bind(wx.EVT_MENU, self.onExitClick, item)
        self.mainMenu.Append(wxglade_tmp_menu, "&File")
        wxglade_tmp_menu = wx.Menu()
        wxglade_tmp_menu_sub = wx.Menu()
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "5", "", wx.ITEM_RADIO)
        self.Bind(wx.EVT_MENU, self.on5, item)
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "10", "", wx.ITEM_RADIO)
        self.Bind(wx.EVT_MENU, self.on10, item)
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "20", "", wx.ITEM_RADIO)
        self.Bind(wx.EVT_MENU, self.on20, item)
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "30", "", wx.ITEM_RADIO)
        self.Bind(wx.EVT_MENU, self.on30, item)
        item = wxglade_tmp_menu_sub.Append(wx.ID_ANY, "50", "", wx.ITEM_RADIO)
        self.Bind(wx.EVT_MENU, self.on50, item)
        wxglade_tmp_menu.Append(wx.ID_ANY, "&Columns", wxglade_tmp_menu_sub, "")
        self.mainMenu.Append(wxglade_tmp_menu, "&View")
        self.SetMenuBar(self.mainMenu)
        # Menu Bar end

        self.statusBar = self.CreateStatusBar(1, wx.STB_DEFAULT_STYLE)
        self.statusBar.SetStatusWidths([-1])
        # statusbar fields
        statusBar_fields = ["ready"]
        for i in range(len(statusBar_fields)):
            self.statusBar.SetStatusText(statusBar_fields[i], i)

        self.panel_1 = wx.Panel(self, wx.ID_ANY)

        sizer_1 = wx.BoxSizer(wx.VERTICAL)

        sizer_2 = wx.BoxSizer(wx.HORIZONTAL)
        sizer_1.Add(sizer_2, 0, wx.EXPAND | wx.LEFT | wx.RIGHT | wx.TOP, 5)

        self.commandCB = wx.ComboBox(self.panel_1, wx.ID_ANY, choices=[], style=wx.CB_DROPDOWN | wx.TE_PROCESS_ENTER)
        sizer_2.Add(self.commandCB, 1, wx.RIGHT, 5)

        self.goBtn = wx.Button(self.panel_1, wx.ID_ANY, "GO")
        sizer_2.Add(self.goBtn, 0, 0, 0)

        self.resultTxt = wx.TextCtrl(self.panel_1, wx.ID_ANY, "", style=wx.TE_MULTILINE | wx.TE_READONLY)
        self.resultTxt.SetMinSize((-1, 80))
        sizer_1.Add(self.resultTxt, 0, wx.BOTTOM | wx.EXPAND | wx.TOP, 5)

        self.resultGrid = wx.grid.Grid(self.panel_1, wx.ID_ANY, size=(1, 1))
        self.resultGrid.CreateGrid(0, 5)
        sizer_1.Add(self.resultGrid, 1, wx.ALL | wx.EXPAND, 0)

        self.panel_1.SetSizer(sizer_1)

        self.Layout()

        self.Bind(wx.EVT_TEXT_ENTER, self.onGoBtnClick, self.commandCB)
        self.Bind(wx.EVT_BUTTON, self.onGoBtnClick, self.goBtn)
        # end wxGlade

    def onExitClick(self, event):  # wxGlade: MainFrame.<event_handler>
        sqlConn.closeConnection()
        quit()

    def onGoBtnClick(self, event):  # wxGlade: MainFrame.<event_handler>
        result = sqlConn.executeCmd(self.commandCB.Value)
        if isinstance(result, list):
            if self.resultGrid.NumberRows != 0:
                self.resultGrid.DeleteRows(0, self.resultGrid.NumberRows)

            for line in result:
                # self.resultTxt.AppendText('   '.join(
                #     str(val) for val in line) + '\n')
                self.resultGrid.AppendRows()
                i = 0
                for val in line:
                    i += 1
                    if i > self.resultGrid.NumberCols:
                        self.resultTxt.AppendText(
                            'too many columns in output\n')
                        break

                    self.resultGrid.SetCellValue(
                        self.resultGrid.NumberRows - 1, i - 1, str(val))
        else:
            self.resultTxt.AppendText(''.join(result) + '\n')
        self.commandCB.Append(self.commandCB.Value)
        self.commandCB.Value = ''
        self.commandCB.SetFocus()

    def onOpenClick(self, event):  # wxGlade: MainFrame.<event_handler>
        with wx.FileDialog(self, 'open database file', style=wx.FD_OPEN | wx.FD_FILE_MUST_EXIST | wx.FD_CHANGE_DIR) as openFile:
            if openFile.ShowModal() == wx.ID_CANCEL:
                return
            else:
                sqlConn.openConnection(openFile.GetPath())

    def onNewClick(self, event):  # wxGlade: MainFrame.<event_handler>
        with wx.FileDialog(self, 'new database file', style=wx.FD_SAVE | wx.FD_OVERWRITE_PROMPT | wx.FD_CHANGE_DIR) as newFile:
            if newFile.ShowModal() == wx.ID_CANCEL:
                return
            else:
                sqlConn.openConnection(newFile.GetPath())

    def onCloseClick(self, event):  # wxGlade: MainFrame.<event_handler>
        sqlConn.closeConnection()

    def on5(self, event):  # wxGlade: MainFrame.<event_handler>
        self.resultGrid.DeleteCols(0, self.resultGrid.NumberCols)
        self.resultGrid.AppendCols(5)

    def on10(self, event):  # wxGlade: MainFrame.<event_handler>
        self.resultGrid.DeleteCols(0, self.resultGrid.NumberCols)
        self.resultGrid.AppendCols(10)

    def on20(self, event):  # wxGlade: MainFrame.<event_handler>
        self.resultGrid.DeleteCols(0, self.resultGrid.NumberCols)
        self.resultGrid.AppendCols(20)

    def on30(self, event):  # wxGlade: MainFrame.<event_handler>
        self.resultGrid.DeleteCols(0, self.resultGrid.NumberCols)
        self.resultGrid.AppendCols(30)

    def on50(self, event):  # wxGlade: MainFrame.<event_handler>
        self.resultGrid.DeleteCols(0, self.resultGrid.NumberCols)
        self.resultGrid.AppendCols(50)
# end of class MainFrame


class MyApp(wx.App):
    def OnInit(self):
        self.frame = MainFrame(None, wx.ID_ANY, "")
        self.SetTopWindow(self.frame)
        self.frame.Show()
        return True

# end of class MyApp


sqlConn = SQLiteCtrl()

if __name__ == "__main__":
    app = MyApp(0)
    chdir(Path.home().as_posix())
    app.MainLoop()
